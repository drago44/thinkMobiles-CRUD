//Підключення шрифту
@mixin font($font_name, $file_name, $weight, $style) {
	@font-face {
		font-family: $font_name;
		font-display: swap;
		src: url("../fonts/#{$file_name}.woff2") format("woff2"),
		url("../fonts/#{$file_name}.woff") format("woff");
		font-weight: #{$weight};
		font-style: #{$style};
	}
}

//Currency
@mixin currency($sym) {
	&::after {
		content: "#{$sym}";
	}
}

// Grids
@mixin gridCards($type: fit, $min: 280px, $max: 1fr, $gap: 30px) {
	display: grid;
	gap: $gap;
	grid-template-columns: repeat(auto-#{$type}, minmax($min, $max));
}

// Адаптивна властивість (clamp)
@mixin adaptiveValue($property, $startSize, $minSize, $keepSize: 0, $widthFrom: $containerWidth, $widthTo: $minWidth) {
	@if ($startSize==0) {
		$startSize: 0.000001;
	}

	@if ($minSize==0) {
		$minSize: 0.000001;
	}

	// Для calc();
	$addSize: math.div($startSize - $minSize, 16);

	@if ($widthFrom ==$containerWidth and $maxWidthContainer ==0) {
		$widthFrom: $maxWidth;
	}

	// Брейк-поїнти в EM
	$widthFromMedia: em($widthFrom);
	$widthToMedia: em($widthTo);

	// Формула плаваючого значення
	// Источник: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
	$slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
	$yIntersection: -$widthTo * $slope + $minSize;

	@if ($yIntersection==0) {
		$yIntersection: 0.000001;
	}

	$flyValue: #{rem($yIntersection)}" + "#{$slope * 100}vw;

	// Отримання значення властивості
	$propertyValue: #{"clamp(" rem($minSize) "," $flyValue "," rem($startSize) ")"};

	// Якщо негативні значення
	@if ($minSize > $startSize) {
		$propertyValue: #{"clamp(" rem($startSize) "," $flyValue "," rem($minSize) ")"};
	}

	// Встановлюємо значення за замовчуванням
	@if $keepSize !=1 and $keepSize !=3 {
		@media (min-width: $widthFromMedia) {
			#{$property}: rem($startSize);
		}
	}

	// Адаптуємо розмір у проміжку між зазначеними ширинами в'юпорту
	@media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {

		// Якщо підтримується clamp();
		@supports (#{$property}: $propertyValue) {
			#{$property}: $propertyValue;
		}

		// Якщо не підтримується clamp();
		@supports not (#{$property}: $propertyValue) {
			#{$property}: calc(#{rem($minSize)} + #{$addSize} * (100vw - #{rem($widthTo)}) / #{math.div($widthFrom, 16) - math.div($widthTo, 16)});
		}
	}

	@if $keepSize !=1 and $keepSize !=2 {
		@media (max-width: $widthToMedia) {
			#{$property}: rem($minSize);
		}
	}
}


@mixin icon-av($icon-name, $icon-color, $size-big, $size-small) {
	@if map-has-key($icons, $icon-name) {
		@extend %i-icon;

		$icon-data: map-safe-get($icons, $icon-name);
		// $color-data: map-safe-get($colors, $icon-color);

		&::before {
			background-image: url(svg-icon-get($icon-data, $icon-color));

			@include adaptiveValue("height", $size-big, $size-small);
			@include adaptiveValue("width", $size-big, $size-small);
		}
	}

	@else {
		@error 'There is no key `#{$icon-name}` in the list of keys `#{map-keys($icons)}`';
	}
}

@mixin update-icon-av($icon-name, $icon-color, $size-big, $size-small) {
	@if map-has-key($icons, $icon-name) {
		$icon-data: map-safe-get($icons, $icon-name);
		// $color-data: map-safe-get($colors, $icon-color);

		&::before {
			background-image: url(svg-icon-get($icon-data, $icon-color));
			@include adaptiveValue("height", $size-big, $size-small);
			@include adaptiveValue("width", $size-big, $size-small);
		}
	}

	@else {
		@error 'There is no key `#{$icon-name}` in the list of keys `#{map-keys($icons)}`';
	}
}

